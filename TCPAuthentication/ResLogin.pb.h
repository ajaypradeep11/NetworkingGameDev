// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResLogin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ResLogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ResLogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ResLogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ResLogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ResLogin_2eproto;
namespace protoAuth {
class LoginRespose;
struct LoginResposeDefaultTypeInternal;
extern LoginResposeDefaultTypeInternal _LoginRespose_default_instance_;
}  // namespace protoAuth
PROTOBUF_NAMESPACE_OPEN
template<> ::protoAuth::LoginRespose* Arena::CreateMaybeMessage<::protoAuth::LoginRespose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protoAuth {

enum LoginRespose_eLoginResult : int {
  LoginRespose_eLoginResult_SUCCESS = 0,
  LoginRespose_eLoginResult_INVALID_PASSWORD = 1,
  LoginRespose_eLoginResult_EMAIL_NOT_FOUND = 2,
  LoginRespose_eLoginResult_INTERNAL_SERVER_ERROR = 3
};
bool LoginRespose_eLoginResult_IsValid(int value);
constexpr LoginRespose_eLoginResult LoginRespose_eLoginResult_eLoginResult_MIN = LoginRespose_eLoginResult_SUCCESS;
constexpr LoginRespose_eLoginResult LoginRespose_eLoginResult_eLoginResult_MAX = LoginRespose_eLoginResult_INTERNAL_SERVER_ERROR;
constexpr int LoginRespose_eLoginResult_eLoginResult_ARRAYSIZE = LoginRespose_eLoginResult_eLoginResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginRespose_eLoginResult_descriptor();
template<typename T>
inline const std::string& LoginRespose_eLoginResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginRespose_eLoginResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginRespose_eLoginResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginRespose_eLoginResult_descriptor(), enum_t_value);
}
inline bool LoginRespose_eLoginResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginRespose_eLoginResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginRespose_eLoginResult>(
    LoginRespose_eLoginResult_descriptor(), name, value);
}
// ===================================================================

class LoginRespose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoAuth.LoginRespose) */ {
 public:
  inline LoginRespose() : LoginRespose(nullptr) {}
  ~LoginRespose() override;
  explicit constexpr LoginRespose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRespose(const LoginRespose& from);
  LoginRespose(LoginRespose&& from) noexcept
    : LoginRespose() {
    *this = ::std::move(from);
  }

  inline LoginRespose& operator=(const LoginRespose& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRespose& operator=(LoginRespose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRespose& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRespose* internal_default_instance() {
    return reinterpret_cast<const LoginRespose*>(
               &_LoginRespose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRespose& a, LoginRespose& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRespose* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRespose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRespose* New() const final {
    return new LoginRespose();
  }

  LoginRespose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRespose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRespose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRespose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRespose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoAuth.LoginRespose";
  }
  protected:
  explicit LoginRespose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginRespose_eLoginResult eLoginResult;
  static constexpr eLoginResult SUCCESS =
    LoginRespose_eLoginResult_SUCCESS;
  static constexpr eLoginResult INVALID_PASSWORD =
    LoginRespose_eLoginResult_INVALID_PASSWORD;
  static constexpr eLoginResult EMAIL_NOT_FOUND =
    LoginRespose_eLoginResult_EMAIL_NOT_FOUND;
  static constexpr eLoginResult INTERNAL_SERVER_ERROR =
    LoginRespose_eLoginResult_INTERNAL_SERVER_ERROR;
  static inline bool eLoginResult_IsValid(int value) {
    return LoginRespose_eLoginResult_IsValid(value);
  }
  static constexpr eLoginResult eLoginResult_MIN =
    LoginRespose_eLoginResult_eLoginResult_MIN;
  static constexpr eLoginResult eLoginResult_MAX =
    LoginRespose_eLoginResult_eLoginResult_MAX;
  static constexpr int eLoginResult_ARRAYSIZE =
    LoginRespose_eLoginResult_eLoginResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eLoginResult_descriptor() {
    return LoginRespose_eLoginResult_descriptor();
  }
  template<typename T>
  static inline const std::string& eLoginResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eLoginResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eLoginResult_Name.");
    return LoginRespose_eLoginResult_Name(enum_t_value);
  }
  static inline bool eLoginResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eLoginResult* value) {
    return LoginRespose_eLoginResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReqIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // required int32 reqId = 1;
  bool has_reqid() const;
  private:
  bool _internal_has_reqid() const;
  public:
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .protoAuth.LoginRespose.eLoginResult result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::protoAuth::LoginRespose_eLoginResult result() const;
  void set_result(::protoAuth::LoginRespose_eLoginResult value);
  private:
  ::protoAuth::LoginRespose_eLoginResult _internal_result() const;
  void _internal_set_result(::protoAuth::LoginRespose_eLoginResult value);
  public:

  // @@protoc_insertion_point(class_scope:protoAuth.LoginRespose)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  int result_;
  friend struct ::TableStruct_ResLogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRespose

// required int32 reqId = 1;
inline bool LoginRespose::_internal_has_reqid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginRespose::has_reqid() const {
  return _internal_has_reqid();
}
inline void LoginRespose::clear_reqid() {
  reqid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRespose::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRespose::reqid() const {
  // @@protoc_insertion_point(field_get:protoAuth.LoginRespose.reqId)
  return _internal_reqid();
}
inline void LoginRespose::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  reqid_ = value;
}
inline void LoginRespose::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:protoAuth.LoginRespose.reqId)
}

// required .protoAuth.LoginRespose.eLoginResult result = 2;
inline bool LoginRespose::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginRespose::has_result() const {
  return _internal_has_result();
}
inline void LoginRespose::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protoAuth::LoginRespose_eLoginResult LoginRespose::_internal_result() const {
  return static_cast< ::protoAuth::LoginRespose_eLoginResult >(result_);
}
inline ::protoAuth::LoginRespose_eLoginResult LoginRespose::result() const {
  // @@protoc_insertion_point(field_get:protoAuth.LoginRespose.result)
  return _internal_result();
}
inline void LoginRespose::_internal_set_result(::protoAuth::LoginRespose_eLoginResult value) {
  assert(::protoAuth::LoginRespose_eLoginResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void LoginRespose::set_result(::protoAuth::LoginRespose_eLoginResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:protoAuth.LoginRespose.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protoAuth

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protoAuth::LoginRespose_eLoginResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protoAuth::LoginRespose_eLoginResult>() {
  return ::protoAuth::LoginRespose_eLoginResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ResLogin_2eproto
