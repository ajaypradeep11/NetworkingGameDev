// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResRegister.proto

#include "ResRegister.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protoAuth {
constexpr RegisterationRespose::RegisterationRespose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reqid_(0)
  , result_(0)
{}
struct RegisterationResposeDefaultTypeInternal {
  constexpr RegisterationResposeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterationResposeDefaultTypeInternal() {}
  union {
    RegisterationRespose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterationResposeDefaultTypeInternal _RegisterationRespose_default_instance_;
}  // namespace protoAuth
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ResRegister_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ResRegister_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ResRegister_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ResRegister_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protoAuth::RegisterationRespose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoAuth::RegisterationRespose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoAuth::RegisterationRespose, reqid_),
  PROTOBUF_FIELD_OFFSET(::protoAuth::RegisterationRespose, result_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::protoAuth::RegisterationRespose)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoAuth::_RegisterationRespose_default_instance_),
};

const char descriptor_table_protodef_ResRegister_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ResRegister.proto\022\tprotoAuth\"\321\001\n\024Regis"
  "terationRespose\022\r\n\005reqId\030\001 \002(\005\022:\n\006result"
  "\030\002 \002(\0162*.protoAuth.RegisterationRespose."
  "eRegResult\"n\n\neRegResult\022\013\n\007SUCCESS\020\000\022\032\n"
  "\026ACCOUNT_ALREADY_EXISTS\020\001\022\034\n\030PASSWORD_CO"
  "NDITION_CHECK\020\002\022\031\n\025INTERNAL_SERVER_ERROR"
  "\020\003"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ResRegister_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ResRegister_2eproto = {
  false, false, 242, descriptor_table_protodef_ResRegister_2eproto, "ResRegister.proto", 
  &descriptor_table_ResRegister_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_ResRegister_2eproto::offsets,
  file_level_metadata_ResRegister_2eproto, file_level_enum_descriptors_ResRegister_2eproto, file_level_service_descriptors_ResRegister_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ResRegister_2eproto_getter() {
  return &descriptor_table_ResRegister_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ResRegister_2eproto(&descriptor_table_ResRegister_2eproto);
namespace protoAuth {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterationRespose_eRegResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ResRegister_2eproto);
  return file_level_enum_descriptors_ResRegister_2eproto[0];
}
bool RegisterationRespose_eRegResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegisterationRespose_eRegResult RegisterationRespose::SUCCESS;
constexpr RegisterationRespose_eRegResult RegisterationRespose::ACCOUNT_ALREADY_EXISTS;
constexpr RegisterationRespose_eRegResult RegisterationRespose::PASSWORD_CONDITION_CHECK;
constexpr RegisterationRespose_eRegResult RegisterationRespose::INTERNAL_SERVER_ERROR;
constexpr RegisterationRespose_eRegResult RegisterationRespose::eRegResult_MIN;
constexpr RegisterationRespose_eRegResult RegisterationRespose::eRegResult_MAX;
constexpr int RegisterationRespose::eRegResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class RegisterationRespose::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterationRespose>()._has_bits_);
  static void set_has_reqid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RegisterationRespose::RegisterationRespose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoAuth.RegisterationRespose)
}
RegisterationRespose::RegisterationRespose(const RegisterationRespose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reqid_, &from.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:protoAuth.RegisterationRespose)
}

void RegisterationRespose::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reqid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(result_));
}

RegisterationRespose::~RegisterationRespose() {
  // @@protoc_insertion_point(destructor:protoAuth.RegisterationRespose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterationRespose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterationRespose::ArenaDtor(void* object) {
  RegisterationRespose* _this = reinterpret_cast< RegisterationRespose* >(object);
  (void)_this;
}
void RegisterationRespose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterationRespose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterationRespose::Clear() {
// @@protoc_insertion_point(message_clear_start:protoAuth.RegisterationRespose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&reqid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&reqid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterationRespose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reqid(&has_bits);
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .protoAuth.RegisterationRespose.eRegResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protoAuth::RegisterationRespose_eRegResult_IsValid(val))) {
            _internal_set_result(static_cast<::protoAuth::RegisterationRespose_eRegResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterationRespose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoAuth.RegisterationRespose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 reqId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // required .protoAuth.RegisterationRespose.eRegResult result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoAuth.RegisterationRespose)
  return target;
}

size_t RegisterationRespose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protoAuth.RegisterationRespose)
  size_t total_size = 0;

  if (_internal_has_reqid()) {
    // required int32 reqId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqid());
  }

  if (_internal_has_result()) {
    // required .protoAuth.RegisterationRespose.eRegResult result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return total_size;
}
size_t RegisterationRespose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoAuth.RegisterationRespose)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 reqId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqid());

    // required .protoAuth.RegisterationRespose.eRegResult result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterationRespose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterationRespose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterationRespose::GetClassData() const { return &_class_data_; }

void RegisterationRespose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterationRespose *>(to)->MergeFrom(
      static_cast<const RegisterationRespose &>(from));
}


void RegisterationRespose::MergeFrom(const RegisterationRespose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoAuth.RegisterationRespose)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reqid_ = from.reqid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterationRespose::CopyFrom(const RegisterationRespose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoAuth.RegisterationRespose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterationRespose::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RegisterationRespose::InternalSwap(RegisterationRespose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterationRespose, result_)
      + sizeof(RegisterationRespose::result_)
      - PROTOBUF_FIELD_OFFSET(RegisterationRespose, reqid_)>(
          reinterpret_cast<char*>(&reqid_),
          reinterpret_cast<char*>(&other->reqid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterationRespose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ResRegister_2eproto_getter, &descriptor_table_ResRegister_2eproto_once,
      file_level_metadata_ResRegister_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protoAuth
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protoAuth::RegisterationRespose* Arena::CreateMaybeMessage< ::protoAuth::RegisterationRespose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoAuth::RegisterationRespose >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
